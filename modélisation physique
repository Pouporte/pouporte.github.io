import math
import matplotlib.pyplot as plt
import numpy as np

# Constantes
g = 9.81         # gravité [m/s^2]
l = 0.15         # longueur du pendule [m]
m = 0.1          # masse du pendule [kg]
b = 0.001        # coefficient de frottement [kg*m^2/s]

# Paramètres de la simulation
step = 0.001                # pas de temps [s]
end = 20.0                  # durée de la simulation [s]
theta_0 = math.pi / 6       # position angulaire initiale [rad]
theta_dot_0 = 0             # vitesse angulaire initiale [rad/s]

# Initialisation des tableaux de temps et des résultats
t = np.arange(0, end, step)
theta = np.empty_like(t)          
theta_dot = np.empty_like(t)
theta_dot_dot = np.empty_like(t)

def simulation():
    """ Exécute la simulation avec le coefficient de frottement défini. """
    theta[0] = theta_0
    theta_dot[0] = theta_dot_0
    
    for i in range(len(t)-1):
        dt = step
        
        # Calcul de l'accélération angulaire du pendule
        theta_dot_dot[i] = -g/l * math.sin(theta[i]) - b/(m * l**2) * theta_dot[i]
        
        # Mise à jour des vitesses et positions angulaires
        theta_dot[i+1] = theta_dot[i] + theta_dot_dot[i] * dt
        theta[i+1] = theta[i] + theta_dot[i] * dt

    theta_dot_dot[-1] = theta_dot_dot[-2]  # Correction pour l'index final

def get_kinetic_energy(i):
    """ Calcule l'énergie cinétique du pendule à l'itération i. """
    speed = l * theta_dot[i]    # vitesse du pendule (scalaire)
    return 0.5 * m * speed**2   # énergie cinétique

def calculer_energies():
    """ Calcule les énergies potentielle, cinétique et totale pour chaque instant. """
    e_pot = m * g * l * (1 - np.cos(theta))   # énergie potentielle
    e_kin = np.array([get_kinetic_energy(i) for i in range(len(t))])  # énergie cinétique
    e_tot = e_pot + e_kin  # énergie totale
    return e_pot, e_kin, e_tot

def afficher_graphiques():
    """ Affiche les graphiques de position, vitesse, et accélération angulaire du pendule. """
    plt.figure(figsize=(5, 6))
    plt.subplot(3, 1, 1)
    plt.plot(t, theta, label="Position angulaire θ")
    plt.legend()
    plt.subplot(3, 1, 2)
    plt.plot(t, theta_dot, label="Vitesse angulaire ω")
    plt.legend()
    plt.subplot(3, 1, 3)
    plt.plot(t, theta_dot_dot, label="Accélération angulaire α")
    plt.legend()
    plt.tight_layout()
    plt.show()

def afficher_graphiques_energie():
    """ Affiche les graphiques d'énergie potentielle, cinétique et totale du pendule. """
    e_pot, e_kin, e_tot = calculer_energies()

    plt.figure(figsize=(5, 6))
    plt.plot(t, e_pot, label="Énergie potentielle")
    plt.plot(t, e_kin, label="Énergie cinétique")
    plt.plot(t, e_tot, label="Énergie totale")
    plt.legend()
    plt.title("Énergies du pendule")
    plt.tight_layout()
    plt.show()

def afficher_tout_les_graph():
    afficher_graphiques()
    afficher_graphiques_energie()

# Exécution de la simulation avec frottement
simulation()
afficher_tout_les_graph()
